"""
whisper_batch/app/main.py ‚Äï Whisper Batch Worker (revised 2025-05-03)

Queued ‚Üí processing ‚Üí completed/failed „ÅÆ„Éê„ÉÉ„ÉÅ„ÉØ„Éº„Ç´„Éº„ÄÇ
Firestore „ÅÆ„Çπ„Ç≠„Éº„ÉûÂ∑ÆÁï∞„ÉªÁí∞Â¢ÉÂ∑ÆÁï∞„ÇíËá™Â∑±Âê∏Âèé„Åß„Åç„Çã„Çà„ÅÜÊîπ‰øÆ„ÄÇ
"""

from __future__ import annotations

import datetime
import json
import os
import shutil
import sys
import tempfile
import time
import traceback
from pathlib import Path
from typing import Any, Dict, Optional

from dotenv import load_dotenv
from google.cloud import firestore, storage

# ‚îÄ‚îÄ Â§ñÈÉ®„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from convert_audio import convert_audio
from transcribe import transcribe_audio
from diarize import diarize_audio
from combine_results import combine_results

# ‚îÄ‚îÄ .env Ë™≠„ÅøËæº„Åø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv("config/.env", override=True)

# ‚îÄ‚îÄ Áí∞Â¢ÉÂ§âÊï∞ÔºàË§áÊï∞ÂêçÁß∞„Çí„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÅßÂê∏ÂèéÔºâ ‚îÄ‚îÄ
COLLECTION: str = (
    os.getenv("WHISPER_COLLECTION")
    or os.getenv("WHISPER_JOBS_COLLECTION")
    or "whisper_jobs"
)

PROCESS_TIMEOUT_SECONDS: int = int(os.getenv("PROCESS_TIMEOUT_SECONDS", "300"))
DURATION_TIMEOUT_FACTOR: float = float(
    os.getenv("DURATION_TIMEOUT_FACTOR")
    or os.getenv("AUDIO_TIMEOUT_MULTIPLIER")
    or "1.5"
)

POLL_INTERVAL_SECONDS: int = int(os.getenv("POLL_INTERVAL_SECONDS", "5"))

# Èü≥Â£∞„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÖà„Éê„Ç±„ÉÉ„ÉàÔºàÁµêÊûú„ÇÇÂêå„Åò„Éê„Ç±„ÉÉ„Éà„Å´Ê†ºÁ¥çÔºâ
GCS_BUCKET_NAME: str = os.getenv("GCS_BUCKET_NAME")
if not GCS_BUCKET_NAME:
    sys.stderr.write("[FATAL] GCS_BUCKET_NAME „ÅåÊú™Ë®≠ÂÆö„Åß„Åô„ÄÇ\n")
    sys.exit(1)

# HuggingFace „Éà„Éº„ÇØ„É≥ÂøÖÈ†àÔºàPyAnnoteÔºâ
HF_AUTH_TOKEN: Optional[str] = os.getenv("HF_AUTH_TOKEN")
if not HF_AUTH_TOKEN:
    sys.stderr.write(
        "[FATAL] HF_AUTH_TOKEN „ÅåÊú™Ë®≠ÂÆö„Åß„Åô„ÄÇË©±ËÄÖÂàÜÈõ¢„Éë„Ç§„Éó„É©„Ç§„É≥„ÅåÂàùÊúüÂåñ„Åß„Åç„Åæ„Åõ„Çì„ÄÇ\n"
    )
    sys.exit(1)

# „Éá„Éê„Ç§„ÇπË®≠ÂÆö
DEVICE: str = os.getenv("DEVICE", "cuda").lower()
USE_GPU: bool = DEVICE == "cuda"

# ‰∏ÄÊôÇ„Éá„Ç£„É¨„ÇØ„Éà„É™
TMP_ROOT: Path = Path(os.getenv("TMP_ROOT") or os.getenv("LOCAL_TMP_DIR", "/tmp"))

# ‚îÄ‚îÄ ÂÖ±ÈÄö„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _utcnow() -> datetime.datetime:
    return datetime.datetime.now(tz=datetime.timezone.utc)


def _log(msg: str, level: str = "INFO") -> None:
    ts = _utcnow().isoformat(timespec="seconds")
    out = sys.stderr if level.upper() == "ERROR" else sys.stdout
    print(f"{ts} [{level}] {msg}", file=out, flush=True)


# ‚îÄ‚îÄ Firestore „Çø„Ç§„É†„Ç¢„Ç¶„ÉàÂà§ÂÆö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _mark_timeout_jobs(db: firestore.Client) -> None:
    """processing Áä∂ÊÖã„Åß„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åü„Ç∏„Éß„Éñ„Çí failed „Å∏"""
    now = _utcnow()
    col = db.collection(COLLECTION)
    batch = db.batch()
    updated = False

    for snap in col.where("status", "==", "processing").stream():
        data = snap.to_dict()
        started_at: Optional[datetime.datetime] = data.get("process_started_at")
        if not started_at:
            continue
        if started_at.tzinfo is None:
            started_at = started_at.replace(tzinfo=datetime.timezone.utc)

        duration_ms = (
            data.get("audio_duration_ms")
            or data.get("audio_duration")
            or 0
        )
        timeout_sec = max(
            PROCESS_TIMEOUT_SECONDS, int(duration_ms / 1000 * DURATION_TIMEOUT_FACTOR)
        )

        if (now - started_at).total_seconds() > timeout_sec:
            batch.update(
                snap.reference,
                {
                    "status": "failed",
                    "error": "timeout",
                    "updated_at": firestore.SERVER_TIMESTAMP,
                },
            )
            updated = True

    if updated:
        batch.commit()


# ‚îÄ‚îÄ Ê¨°„Ç∏„Éß„ÉñÂèñÂæóÔºàTransactionalÔºâ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _pick_next_job(db: firestore.Client) -> Optional[Dict[str, Any]]:
    @firestore.transactional
    def _txn(tx: firestore.Transaction) -> Optional[Dict[str, Any]]:
        col = db.collection(COLLECTION)
        docs = (
            col.where("status", "==", "queued")
            .order_by("created_at")
            .limit(1)
            .stream(transaction=tx)
        )
        docs = list(docs)
        if not docs:
            return None

        doc = docs[0]
        tx.update(
            doc.reference,
            {
                "status": "processing",
                "process_started_at": firestore.SERVER_TIMESTAMP,
                "updated_at": firestore.SERVER_TIMESTAMP,
            },
        )
        data = doc.to_dict()
        data["id"] = doc.id
        return data

    return _txn(db.transaction())


# ‚îÄ‚îÄ ÂÄãÂà•„Ç∏„Éß„ÉñÂá¶ÁêÜ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _resolve_audio_uri(job: Dict[str, Any]) -> str:
    """audio_gcs_uri „Åæ„Åü„ÅØ (bucket + path) „Åã„ÇâÂÆåÂÖ® URI „ÇíÁîüÊàê"""
    if "audio_gcs_uri" in job:
        return job["audio_gcs_uri"]
    if "gcs_bucket_name" in job and "audio_file_path" in job:
        return f"gs://{job['gcs_bucket_name']}/{job['audio_file_path']}"
    raise KeyError("audio_gcs_uri „Åæ„Åü„ÅØ gcs_bucket_name+audio_file_path „Åå„ÅÇ„Çä„Åæ„Åõ„Çì")


def _process_job(db: firestore.Client, job: Dict[str, Any]) -> None:
    job_id = job["id"]
    try:
        audio_uri = _resolve_audio_uri(job)
    except Exception as e:
        _log(f"JOB {job_id} ‚úñ Metadata error: {e}", level="ERROR")
        db.collection(COLLECTION).document(job_id).update(
            {"status": "failed", "error": str(e), "updated_at": firestore.SERVER_TIMESTAMP}
        )
        return

    _log(f"JOB {job_id} ‚ñ∂ Start  ({audio_uri})")

    tmp_dir = TMP_ROOT / f"job_{job_id}_{int(time.time())}"
    tmp_dir.mkdir(parents=True, exist_ok=True)
    storage_client = storage.Client()

    try:
        # ‚îÄ‚îÄ 1. „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        local_audio = tmp_dir / Path(audio_uri).name
        bucket_name, blob_path = audio_uri[5:].split("/", 1)
        storage_client.bucket(bucket_name).blob(blob_path).download_to_filename(
            local_audio
        )
        _log(f"JOB {job_id}  ‚§µ  Downloaded ‚Üí {local_audio}")

        # ‚îÄ‚îÄ 2. „Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂ§âÊèõ (16 kHz / mono / wav) ‚îÄ
        wav_path = tmp_dir / "audio_16k_mono.wav"
        convert_audio(str(local_audio), str(wav_path), use_gpu=USE_GPU)
        _log(f"JOB {job_id}  üéß Converted ‚Üí {wav_path}")

        # ‚îÄ‚îÄ 3. ÊñáÂ≠óËµ∑„Åì„Åó ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        transcription_json = tmp_dir / "transcript.json"
        transcribe_audio(str(wav_path), str(transcription_json), device=DEVICE)
        _log(f"JOB {job_id}  ‚úç  Transcribed ‚Üí {transcription_json}")

        # ‚îÄ‚îÄ 4. Ë©±ËÄÖ„ÉÄ„Ç§„Ç¢„É™„Çº„Éº„Ç∑„Éß„É≥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        diarization_json = tmp_dir / "speaker.json"
        diarize_audio(
            str(wav_path),
            str(diarization_json),
            hf_auth_token=HF_AUTH_TOKEN,
            num_speakers=job.get("num_speakers"),
            min_speakers=job.get("min_speakers"),
            max_speakers=job.get("max_speakers"),
            device=DEVICE,
        )
        _log(f"JOB {job_id}  üë• Diarized ‚Üí {diarization_json}")

        # ‚îÄ‚îÄ 5. ÁµêÂêà ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        final_json = tmp_dir / "final.json"
        combine_results(str(transcription_json), str(diarization_json), str(final_json))
        _log(f"JOB {job_id}  üîó Combined ‚Üí {final_json}")

        # ‚îÄ‚îÄ 6. „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        result_blob_path = f"whisper_results/{job_id}.json"
        storage_client.bucket(GCS_BUCKET_NAME).blob(result_blob_path).upload_from_filename(
            final_json
        )
        result_uri = f"gs://{GCS_BUCKET_NAME}/{result_blob_path}"
        _log(f"JOB {job_id}  ‚¨Ü  Uploaded ‚Üí {result_uri}")

        # ‚îÄ‚îÄ 7. Firestore Êõ¥Êñ∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        db.collection(COLLECTION).document(job_id).update(
            {
                "status": "completed",
                "result_json_uri": result_uri,
                "completed_at": firestore.SERVER_TIMESTAMP,
                "updated_at": firestore.SERVER_TIMESTAMP,
            }
        )
        _log(f"JOB {job_id} ‚úî Completed")

    except Exception as e:
        _log(f"JOB {job_id} ‚úñ Failed: {e}\n{traceback.format_exc()}", level="ERROR")
        db.collection(COLLECTION).document(job_id).update(
            {
                "status": "failed",
                "error": str(e),
                "updated_at": firestore.SERVER_TIMESTAMP,
            }
        )
    finally:
        shutil.rmtree(tmp_dir, ignore_errors=True)


# ‚îÄ‚îÄ „É°„Ç§„É≥„É´„Éº„Éó ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main() -> None:
    db = firestore.Client()

    while True:
        try:
            _mark_timeout_jobs(db)
            job = _pick_next_job(db)
            if job:
                _process_job(db, job)
            else:
                _log("„Ç≠„É•„Éº„ÅåÁ©∫„Åß„Åô„ÄÇÂæÖÊ©ü‚Ä¶")
                time.sleep(POLL_INTERVAL_SECONDS)
        except KeyboardInterrupt:
            _log("SIGINT Âèó‰ø°„ÄÇ„ÉØ„Éº„Ç´„Éº„ÇíÁµÇ‰∫Ü„Åó„Åæ„Åô", level="INFO")
            break
        except Exception as e:
            _log(f"Main loop error: {e}\n{traceback.format_exc()}", level="ERROR")
            time.sleep(POLL_INTERVAL_SECONDS)


if __name__ == "__main__":
    main()
