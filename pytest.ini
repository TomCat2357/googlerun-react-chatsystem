[pytest]
# テスト検索パターン
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# PYTHONPATHの設定（プロジェクトルートとbackendディレクトリを追加）
pythonpath = . backend

# 詳細なテスト出力
addopts = -v

# asyncio設定
asyncio_default_fixture_loop_scope = session

# キャプチャ設定（テスト中の標準出力とエラー出力の処理方法）
# キャプチャを無効にするには -s オプションを addopts に追加します
# 例: addopts = -v -s

# 警告の処理
filterwarnings =
    ignore::DeprecationWarning:pydantic.*:
    ignore::PendingDeprecationWarning

# テスト実行時のログ設定
log_cli = True
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# テスト用マーカー（アドバンスドテスト技術対応）
markers =
    # 基本分類
    unit: 単体テスト（純粋なロジック、モック使用）
    integration: 統合テスト（複数コンポーネント、エミュレータ使用）
    e2e: エンドツーエンドテスト（実際の環境での完全なワークフロー）
    
    # 実行時間・パフォーマンス分類
    fast: 高速テスト（1秒未満で完了）
    slow: 遅いテスト（1秒以上かかる）
    very_slow: 非常に遅いテスト（10秒以上かかる）
    performance: パフォーマンステスト（ベンチマーク、負荷テスト）
    benchmark: ベンチマークテスト（定量的性能測定）
    
    # サービス・機能別分類
    whisper: Whisperサービス関連のテスト
    chat: チャット機能のテスト
    auth: 認証・認可機能のテスト
    storage: ファイルストレージ機能のテスト
    api: API エンドポイントのテスト
    ui: ユーザーインターフェースのテスト
    
    # インフラ・環境別分類
    emulator: エミュレータを使用するテスト（Firestore/GCS）
    real_gcp: 実際のGCPサービスを使用するテスト
    local_only: ローカル環境のみで実行可能なテスト
    requires_network: ネットワーク接続が必要なテスト
    
    # テスト戦略・技術別分類
    behavior_driven: 振る舞い駆動設計によるテスト
    data_driven: データ駆動テスト（大量のテストデータ使用）
    parametrized: パラメータ化テスト
    mock_heavy: 多くのモックを使用するテスト
    autospec: create_autospec パターンを使用するテスト
    
    # エラー・例外処理分類
    error_scenarios: エラーシナリオテスト
    edge_cases: エッジケース・境界値テスト
    error_recovery: エラー回復処理のテスト
    timeout_handling: タイムアウト処理のテスト
    
    # セキュリティ・品質分類
    security: セキュリティ関連のテスト
    accessibility: アクセシビリティテスト
    i18n: 国際化・多言語対応テスト
    regression: リグレッションテスト
    
    # 開発段階別分類
    wip: 作業中のテスト（Work In Progress）
    experimental: 実験的なテスト
    skip_ci: CI環境でスキップするテスト
    manual_only: 手動実行のみのテスト

# 高度なテスト実行オプション
addopts = 
    -v
    --strict-markers
    --strict-config
    --tb=short
    --durations=10
    --durations-min=1.0
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=70
    
# 並列実行設定（pytest-xdist）
# addopts に -n auto を追加して並列実行を有効化
# 例: addopts = -v -n auto

# テスト収集設定
collect_ignore = [
    "setup.py",
    "conftest.py",
    "**/node_modules/**",
    "**/dist/**",
    "**/build/**"
]

# カスタムテスト実行プロファイル（コメントアウト、必要に応じて有効化）
# 
# 高速テストのみ実行:
# pytest -m "fast and not slow"
#
# ユニットテストのみ実行:
# pytest -m "unit and not integration"
#
# Whisper機能のテスト実行:
# pytest -m "whisper"
#
# エミュレータ使用テスト実行:
# pytest -m "emulator"
#
# パフォーマンステスト実行:
# pytest -m "performance or benchmark" --tb=no -q
#
# エラーシナリオテスト実行:
# pytest -m "error_scenarios or edge_cases"
#
# CI環境での実行（遅いテストを除外）:
# pytest -m "not very_slow and not manual_only and not skip_ci"
