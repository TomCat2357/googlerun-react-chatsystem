#app.py#

# app.py
# %%
from flask import Flask, request, Response, jsonify, make_response, send_from_directory
from flask_cors import CORS
from firebase_admin import auth, credentials
from dotenv import load_dotenv
from functools import wraps
import os, json, firebase_admin, io, base64
from PIL import Image
from typing import Dict, Union, Optional, Tuple, Callable, Any, List
from litellm import completion, token_counter
from backend.utils.logger import *
from backend.utils.maps import *  # maps.py の関数群をインポート

# .envファイルを読み込み
load_dotenv("./backend/config/.env")

# 環境変数から画像処理設定を読み込む
MAX_IMAGES = int(os.getenv("MAX_IMAGES"))
MAX_LONG_EDGE = int(os.getenv("MAX_LONG_EDGE"))
MAX_IMAGE_SIZE = int(os.getenv("MAX_IMAGE_SIZE"))  # デフォルト5MB

# Firebase Admin SDKの初期化
firebase_admin.initialize_app(
    credentials.Certificate(os.getenv("GOOGLE_APPLICATION_CREDENTIALS"))
)

app = Flask(__name__)

# CORSの設定 - 開発環境用
origins = [
    f"http://localhost:{os.getenv('PORT', 8080)}",
]
if int(os.getenv("DEBUG", 0)):
    origins.append("http://localhost:5173")  # DEBUGモードの場合

CORS(
    app,
    origins=origins,
    supports_credentials=False,
    expose_headers=["Authorization"],
    allow_headers=["Content-Type", "Authorization", "X-API-Key"],
    methods=["GET", "POST", "OPTIONS"],
)

def process_uploaded_image(image_data: str) -> str:
    """
    アップロードされた画像データをリサイズおよび圧縮し、
    適切な「data:image/～;base64,」形式の文字列を返す関数。
    """
    try:
        header = None
        if image_data.startswith("data:"):
            header, image_data = image_data.split(",", 1)
        image_bytes = base64.b64decode(image_data)
        image = Image.open(io.BytesIO(image_bytes))
        if image.mode not in ("RGB", "RGBA"):
            image = image.convert("RGB")
        width, height = image.size
        logger.info("元の画像サイズ: %dx%dpx, 容量: %.1fKB", width, height, len(image_bytes)/1024)
        if max(width, height) > MAX_LONG_EDGE:
            scale = MAX_LONG_EDGE / max(width, height)
            new_width = int(width * scale)
            new_height = int(height * scale)
            image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)
            logger.info("リサイズ後: %dx%dpx", new_width, new_height)
        quality = 85
        output = io.BytesIO()
        output_format = "JPEG"
        mime_type = "image/jpeg"
        if header and "png" in header.lower():
            output_format = "PNG"
            mime_type = "image/png"
            image.save(output, format=output_format, optimize=True)
        else:
            image = image.convert("RGB")
            image.save(output, format=output_format, quality=quality, optimize=True)
        output_data = output.getvalue()
        logger.info("圧縮後の容量: %.1fKB (quality=%d)", len(output_data)/1024, quality)
        while len(output_data) > MAX_IMAGE_SIZE and quality > 30:
            quality -= 10
            output = io.BytesIO()
            image.save(output, format=output_format, quality=quality, optimize=True)
            output_data = output.getvalue()
            logger.info("再圧縮後の容量: %.1fKB (quality=%d)", len(output_data)/1024, quality)
        processed_base64 = base64.b64encode(output_data).decode("utf-8")
        return f"data:{mime_type};base64,{processed_base64}"
    except Exception as e:
        logger.error("画像処理エラー: %s", str(e), exc_info=True)
        return image_data

def get_api_key_for_model(model: str) -> Optional[str]:
    source = model.split("/")[0] if "/" in model else model
    return json.loads(os.getenv("MODEL_API_KEYS", "{}")).get(source, "")

def common_message_function(*, model: str, messages: List, stream: bool = False, **kwargs):
    if stream:
        def chat_stream():
            for i, text in enumerate(completion(messages=messages, model=model, stream=True, **kwargs)):
                if not i:
                    yield
                yield text["choices"][0]["delta"].get("content", "") or ""
        cs = chat_stream()
        cs.__next__()
        return cs
    else:
        return completion(messages=messages, model=model, stream=False, **kwargs)["choices"][0]["message"]["content"]

def require_auth(function: Callable) -> Callable:
    @wraps(function)
    def decorated_function(*args, **kwargs) -> Response:
        try:
            auth_header: Optional[str] = request.headers.get("Authorization")
            if not auth_header or not auth_header.startswith("Bearer "):
                logger.warning("トークンが見つかりません")
                return jsonify({"error": "認証が必要です"}), 401
            token: str = auth_header.split("Bearer ")[1]
            decoded_token: Dict = auth.verify_id_token(token, clock_skew_seconds=60)
            response: Response = function(decoded_token, *args, **kwargs)
            return response
        except Exception as e:
            logger.error("認証エラー: %s", str(e), exc_info=True)
            response: Response = make_response(jsonify({"error": str(e)}))
            response.status_code = 401
            return response
    return decorated_function

# ======= 各種エンドポイント =======

@app.route("/backend/models", methods=["GET"])
@require_auth
def get_models(decoded_token: Dict) -> Response:
    try:
        logger.info("モデル一覧取得処理を開始")
        raw_models = os.getenv("MODELS", "")
        logger.info(f"環境変数 MODELS の値: {raw_models}")
        model_list = [m.strip() for m in raw_models.split(",") if m.strip()]
        logger.info(f"モデル一覧: {model_list}")
        response: Response = make_response(jsonify({"models": model_list}))
        response.status_code = 200
        return response
    except Exception as e:
        logger.error(f"モデル一覧取得中にエラーが発生しました: {e}", exc_info=True)
        error_response: Response = make_response(jsonify({"error": str(e)}))
        error_response.status_code = 500
        return error_response

@app.route("/backend/verify-auth", methods=["GET"])
@require_auth
def verify_auth(decoded_token: Dict) -> Response:
    try:
        logger.info("認証検証開始")
        logger.info("トークンの復号化成功。ユーザー: %s", decoded_token.get("email"))
        response_data = {
            "status": "success",
            "user": {
                "email": decoded_token.get("email"),
                "uid": decoded_token.get("uid"),
            },
            "expire_time": decoded_token.get("exp"),
        }
        logger.info("認証検証完了")
        response: Response = make_response(jsonify(response_data))
        response.status_code = 200
        return response
    except Exception as e:
        logger.error("認証エラー: %s", str(e), exc_info=True)
        response: Response = make_response(jsonify({"error": str(e)}))
        response.status_code = 401
        return response

@app.route("/backend/chat", methods=["POST"])
@require_auth
def chat(decoded_token: Dict) -> Response:
    logger.info("チャットリクエストを処理中")
    try:
        data = request.json
        messages = data.get("messages", [])
        model = data.get("model")
        logger.info(f"モデル: {model}")
        if model is None:
            raise ValueError("モデル情報が提供されていません")
        model_api_key = get_api_key_for_model(model)
        error_keyword = "@trigger_error"
        error_flag = False
        for msg in messages:
            content = msg.get("content", "")
            if error_keyword == content:
                error_flag = True
                break
        transformed_messages = []
        for msg in messages:
            if msg.get("role") == "user" and msg.get("images"):
                parts = []
                if msg.get("content"):
                    parts.append({"type": "text", "text": msg["content"]})
                logger.info(f"画像の数: {len(msg['images'])}")
                images_to_process = msg["images"][:MAX_IMAGES]
                for image in images_to_process:
                    processed_image = process_uploaded_image(image)
                    parts.append({"type": "image_url", "image_url": {"url": processed_image}})
                msg["content"] = parts
                msg.pop("images", None)
            transformed_messages.append(msg)
        logger.info(f"選択されたモデル: {model}")
        logger.debug(f"messages: {transformed_messages}")
        if error_flag:
            raise ValueError("意図的なエラーがトリガーされました")
        response = Response(
            common_message_function(
                model=model,
                stream=True,
                messages=transformed_messages,
                api_key=model_api_key,
            ),
            mimetype="text/event-stream",
            headers={"Cache-Control": "no-cache", "Transfer-Encoding": "chunked"},
        )
        response.status_code = 200
        return response
    except Exception as e:
        logger.error(f"チャットエラー: {e}", exc_info=True)
        error_response = make_response(jsonify({"status": "error", "message": str(e)}))
        error_response.status_code = 500
        return error_response

@app.route("/backend/logout", methods=["POST"])
def logout() -> Response:
    try:
        logger.info("ログアウト処理開始")
        response: Response = make_response(
            jsonify({"status": "success", "message": "ログアウトに成功しました"})
        )
        return response, 200
    except Exception as e:
        logger.error("ログアウト処理中にエラーが発生: %s", str(e), exc_info=True)
        return jsonify({"error": str(e)}), 401

# ======= 詳細なジオコーディング結果を返すエンドポイント =======
@app.route("/backend/query2coordinates", methods=["POST"])
@require_auth
def query2coordinates(decoded_token: Dict) -> Response:
    """
    フロントエンドから送られてきた各行（クエリー）を用いてジオコーディングを行い、
    Maps API の詳細なレスポンス情報を含む JSON を返却するエンドポイント
    """
    try:
        data = request.get_json() or {}
        lines = data.get("lines", [])
        logger.info("受信したクエリーリスト: %s", lines)
        
        google_maps_api_key = os.getenv("GOOGLE_MAPS_API_KEY")
        if not google_maps_api_key:
            raise Exception("Google Maps APIキーが設定されていません")
        
        results = []
        for line in lines:
            query = line.strip()
            if not query:
                continue
            geocode_data = get_coordinates(google_maps_api_key, query)
            if geocode_data.get("status") == "OK" and geocode_data.get("results"):
                result = geocode_data["results"][0]
                location = result["geometry"]["location"]
                results.append({
                    "query": query,
                    "status": geocode_data.get("status"),
                    "formatted_address": result.get("formatted_address", ""),
                    "latitude": location.get("lat"),
                    "longitude": location.get("lng"),
                    "location_type": result["geometry"].get("location_type", ""),
                    "place_id": result.get("place_id", ""),
                    "types": ", ".join(result.get("types", [])),
                    "error": ""
                })
            else:
                results.append({
                    "query": query,
                    "status": geocode_data.get("status", "エラー"),
                    "formatted_address": "",
                    "latitude": None,
                    "longitude": None,
                    "location_type": "",
                    "place_id": "",
                    "types": "",
                    "error": geocode_data.get("status", "エラー")
                })
        
        response: Response = make_response(jsonify({"status": "success", "results": results}))
        response.status_code = 200
        return response
    except Exception as e:
        logger.error("ジオコーディング処理エラー: %s", str(e), exc_info=True)
        error_response = make_response(jsonify({"error": str(e)}))
        error_response.status_code = 500
        return error_response

# ======= フロントエンド配信用（DEBUG以外） =======
if not int(os.getenv("DEBUG", 0)):
    FRONTEND_PATH = "./frontend/dist"
    @app.route("/")
    def index():
        return send_from_directory(FRONTEND_PATH, "index.html")
    @app.route("/<path:path>")
    def static_file(path):
        return send_from_directory(FRONTEND_PATH, path)

# %%
if __name__ == "__main__":
    logger.info("Flaskアプリを起動します DEBUG: %s", bool(int(os.getenv("DEBUG", 0))))
    app.run(port=int(os.getenv("PORT", "8080")), debug=bool(int(os.getenv("DEBUG", 0))))
# %%
google_maps_api_key = os.getenv("GOOGLE_MAPS_API_KEY")
query = "東京駅"
geocode_data = get_coordinates(google_maps_api_key, query)
# %%

#geocodingpage.tsx#
// geocodingpage.tsx
import React, { useState, useEffect } from "react";
import { useAuth } from "../../contexts/AuthContext";
// encoding-japaneseライブラリをインポート
import * as Encoding from "encoding-japanese";

interface GeoResult {
  query: string;
  status: string;
  formatted_address: string;
  latitude: number | null;
  longitude: number | null;
  location_type: string;
  place_id: string;
  types: string;
  error?: string;
}

const GeocodingPage = () => {
  const [inputText, setInputText] = useState("");
  const [lineCount, setLineCount] = useState(0);
  const [isSending, setIsSending] = useState(false);
  // サーバから取得した詳細な結果を保持する
  const [results, setResults] = useState<GeoResult[]>([]);
  const [token, setToken] = useState<string>("");

  const { currentUser } = useAuth();
  const API_BASE_URL: string = import.meta.env.VITE_API_BASE_URL;

  useEffect(() => {
    if (currentUser) {
      currentUser
        .getIdToken()
        .then((t) => setToken(t))
        .catch((err) => console.error("トークン取得エラー:", err));
    }
  }, [currentUser]);

  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const text = e.target.value;
    setInputText(text);
    const validLines = text.split("\n").filter((line) => line.trim().length > 0);
    setLineCount(validLines.length);
  };

  // サーバから詳細なジオコーディング結果を取得（JSON）して state に保持する
  const handleSendLines = async () => {
    const validLines = inputText.split("\n").filter((line) => line.trim().length > 0);
    if (validLines.length === 0) return;

    const confirmed = window.confirm(`クエリー数は${validLines.length} 件です。実行しますか？`);
    if (!confirmed) return;

    setIsSending(true);
    try {
      const response = await fetch(`${API_BASE_URL}/backend/query2coordinates`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ lines: validLines }),
      });
      if (!response.ok) {
        throw new Error("サーバーからエラーが返されました");
      }
      const data = await response.json();
      console.log("送信成功", data);
      setResults(data.results || []);
    } catch (error) {
      console.error("送信エラー", error);
    } finally {
      setIsSending(false);
    }
  };

  // フロントエンド側で保持している詳細情報をもとにCSVファイルを生成してShift_JISでダウンロード
  const handleDownloadCSV = () => {
    if (results.length === 0) return;
    // ヘッダー行
    const header = [
      "No.",
      "クエリー",
      "ステータス",
      "Formatted Address",
      "Latitude",
      "Longitude",
      "Location Type",
      "Place ID",
      "Types",
      "エラー",
    ];
    // 各行のデータ
    const rows = results.map((result, index) => [
      index + 1,
      result.query,
      result.status,
      result.formatted_address,
      result.latitude ?? "",
      result.longitude ?? "",
      result.location_type,
      result.place_id,
      result.types,
      result.error || "",
    ]);

    // CSV用の文字列生成（各項目をダブルクオートで囲み、カンマ区切り）
    const csvContent =
      [header, ...rows]
        .map((row) =>
          row
            .map((cell) => `"${String(cell).replace(/"/g, '""')}"`)
            .join(",")
        )
        .join("\n");

    // まず文字列をコード配列に変換し、その後SJISに変換する
    const codeArray = Encoding.stringToCode(csvContent);
    const sjisArray = Encoding.convert(codeArray, "SJIS");

    const blob = new Blob([new Uint8Array(sjisArray)], { type: "text/csv;charset=shift_jis" });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "geocoding_results.csv";
    document.body.appendChild(a);
    a.click();
    a.remove();
    window.URL.revokeObjectURL(url);
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendLines();
    }
  };

  return (
    <div className="max-w-2xl mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4 text-gray-100">ジオコーディング</h1>
      <div className="mb-4">
        <label htmlFor="addressInput" className="block text-sm font-medium mb-2 text-gray-200">
          クエリー一覧（1行に1つのクエリーを入力）
        </label>
        <textarea
          id="addressInput"
          value={inputText}
          onChange={handleTextChange}
          onKeyDown={handleKeyDown}
          className="w-full h-64 p-2 bg-gray-800 text-gray-100 border border-gray-700 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          placeholder={`例:
札幌市役所 札幌市中央区北１条西２丁目
札幌市北区北２３条西４丁目３－４`}
        />
      </div>
      <div className="flex justify-between items-center mb-4">
        <span className="text-sm text-gray-200">
          有効な行数: <strong>{lineCount}</strong>
        </span>
        <div className="space-x-2">
          <button
            onClick={handleSendLines}
            disabled={isSending}
            className="px-4 py-2 bg-blue-600 text-gray-100 rounded hover:bg-blue-500 transition"
          >
            {isSending ? "送信中..." : "送信"}
          </button>
          <button
            onClick={handleDownloadCSV}
            disabled={isSending || results.length === 0}
            className="px-4 py-2 bg-green-600 text-gray-100 rounded hover:bg-green-500 transition"
          >
            CSVダウンロード
          </button>
        </div>
      </div>
      <div>
        <h2 className="text-xl font-bold mb-2 text-gray-100">ジオコーディング結果</h2>
        {results.length === 0 ? (
          <p className="text-gray-200">結果がまだありません。</p>
        ) : (
          <table className="w-full text-gray-200 border-collapse">
            <thead>
              <tr className="border-b border-gray-700">
                <th className="px-2 py-1">No.</th>
                <th className="px-2 py-1">クエリー</th>
                <th className="px-2 py-1">緯度</th>
                <th className="px-2 py-1">経度</th>
              </tr>
            </thead>
            <tbody>
              {results.map((result, index) => (
                <tr key={index} className="border-b border-gray-700">
                  <td className="px-2 py-1">{index + 1}</td>
                  <td className="px-2 py-1">{result.query}</td>
                  <td className="px-2 py-1">
                    {result.latitude !== null ? Number(result.latitude).toFixed(7) : "-"}
                  </td>
                  <td className="px-2 py-1">
                    {result.longitude !== null ? Number(result.longitude).toFixed(7) : "-"}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
    </div>
  );
};

export default GeocodingPage;

#chatpage.tsx#
import React, { useState, useRef, useEffect, ChangeEvent } from "react";
import { Message, ChatRequest, ChatHistory } from "../../types/apiTypes";
import { useAuth } from "../../contexts/AuthContext";

const ChatContainer: React.FC = () => {
  // ==========================
  //  State, Ref の定義
  // ==========================
  const [currentChatId, setCurrentChatId] = useState<number | null>(null);
  const { currentUser } = useAuth();
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState("");
  const [isProcessing, setIsProcessing] = useState(false);
  const [models, setModels] = useState<string[]>([]);
  const [selectedModel, setSelectedModel] = useState<string>("");
  const [chatHistories, setChatHistories] = useState<ChatHistory[]>([]);
  const messageContainerRef = useRef<HTMLDivElement>(null);
  const abortControllerRef = useRef<AbortController | null>(null);
  const [token, setToken] = useState<string>("");
  const [selectedImagesBase64, setSelectedImagesBase64] = useState<string[]>([]);
  const [errorMessage, setErrorMessage] = useState<string>("");
  const API_BASE_URL : string = import.meta.env.VITE_API_BASE_URL;
  

  // --- 編集モード用の状態 ---
  const [isEditMode, setIsEditMode] = useState<boolean>(false);
  // 編集モードに入る前の全メッセージを保持（キャンセル時に元に戻すため）
  const [backupMessages, setBackupMessages] = useState<Message[]>([]);

  // --- 追加: 拡大表示用の画像 URL を保持する state ---
  const [enlargedImage, setEnlargedImage] = useState<string | null>(null);

  // ==========================
  //  IndexedDB 初期化とチャット履歴の読み込み
  // ==========================
  useEffect(() => {
    const initDB = async () => {
      const request = indexedDB.open("ChatHistoryDB", 1);

      request.onerror = (event) => {
        console.error(
          "IndexedDB初期化エラー:",
          (event.target as IDBRequest).error
        );
      };

      request.onupgradeneeded = (event) => {
        const db = (event.target as IDBOpenDBRequest).result;
        if (!db.objectStoreNames.contains("chatHistory")) {
          db.createObjectStore("chatHistory", { keyPath: "id" });
        }
      };

      request.onsuccess = () => {
        console.log("IndexedDB初期化成功");
        loadChatHistories();
      };
    };

    initDB();
  }, []);

  // ==========================
  //  認証トークンの取得
  // ==========================
  useEffect(() => {
    const fetchToken = async () => {
      if (currentUser) {
        try {
          const t = await currentUser.getIdToken();
          setToken(t);
          console.log("トークン取得成功");
        } catch (error) {
          console.error("トークン取得エラー:", error);
        }
      }
    };
    fetchToken();
  }, [currentUser]);

  // ==========================
  //  メッセージ表示エリアの自動スクロール
  // ==========================
  useEffect(() => {
    if (messageContainerRef.current) {
      messageContainerRef.current.scrollTop =
        messageContainerRef.current.scrollHeight;
    }
  }, [messages]);

  // ==========================
  //  利用可能なAIモデル一覧の取得
  // ==========================
  useEffect(() => {
    const fetchModels = async () => {
      if (!token) return;
      try {
        const response = await fetch(`${API_BASE_URL}/backend/models`, {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        if (Array.isArray(data.models)) {
          setModels(data.models);
          setSelectedModel(data.models[0]);
        }
      } catch (error) {
        console.error("モデル一覧取得エラー:", error);
      }
    };
    fetchModels();
  }, [token]);

  // 環境変数から定数を取得（Vite の場合、import.meta.env を利用）
  const MAX_IMAGES = Number(import.meta.env.VITE_MAX_IMAGES) || 5; // 例：最大5枚
  const MAX_LONG_EDGE = Number(import.meta.env.VITE_MAX_LONG_EDGE) || 1568; // 例：最大1568px
  const MAX_IMAGE_SIZE =
    Number(import.meta.env.VITE_MAX_IMAGE_SIZE) || 5 * 1024 * 1024; // 例：最大5MB（バイト）

  /**
   * processImageFile
   *
   * 画像ファイルを読み込み、FileReader で base64 文字列を取得し、
   * その後、長辺制限と容量制限を適用した dataURL を返す関数です。
   */
  const processImageFile = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      console.log("[processImageFile] 処理開始：", file.name);
      const reader = new FileReader();
      reader.onload = (event) => {
        if (event.target?.result) {
          const dataUrl = event.target.result as string;
          const image = new Image();
          image.onload = () => {
            console.log("[processImageFile] 画像読み込み完了：", file.name);
            let { naturalWidth: width, naturalHeight: height } = image;
            console.log(`[processImageFile] 元サイズ: ${width}x${height}`);
            const longEdge = Math.max(width, height);
            let scale = 1;
            if (longEdge > MAX_LONG_EDGE) {
              scale = MAX_LONG_EDGE / longEdge;
              width = Math.floor(width * scale);
              height = Math.floor(height * scale);
              console.log(
                `[processImageFile] リサイズ実施：新サイズ ${width}x${height}`
              );
            } else {
              console.log("[processImageFile] リサイズ不要");
            }
            const canvas = document.createElement("canvas");
            canvas.width = width;
            canvas.height = height;
            const ctx = canvas.getContext("2d");
            if (!ctx) {
              reject(new Error("キャンバスの取得に失敗しました"));
              return;
            }
            ctx.drawImage(image, 0, 0, width, height);

            let quality = 0.85;
            const minQuality = 0.3;
            const processCanvas = () => {
              const newDataUrl = canvas.toDataURL("image/jpeg", quality);
              const arr = newDataUrl.split(",");
              const byteString = atob(arr[1]);
              const buffer = new ArrayBuffer(byteString.length);
              const intArray = new Uint8Array(buffer);
              for (let i = 0; i < byteString.length; i++) {
                intArray[i] = byteString.charCodeAt(i);
              }
              const blob = new Blob([buffer], { type: "image/jpeg" });
              console.log(
                `[processImageFile] 現在の品質 ${quality}, Blobサイズ: ${blob.size} bytes`
              );
              if (blob.size > MAX_IMAGE_SIZE && quality > minQuality) {
                quality -= 0.1;
                console.log(
                  `[processImageFile] サイズ超過のため再圧縮：新品質 ${quality}`
                );
                processCanvas();
              } else {
                console.log("[processImageFile] 画像処理完了");
                resolve(newDataUrl);
              }
            };
            processCanvas();
          };
          image.onerror = () => {
            console.error("[processImageFile] 画像読み込みエラー", file.name);
            reject(new Error("画像読み込みエラー"));
          };
          image.src = dataUrl;
        } else {
          reject(new Error("Failed to read file"));
        }
      };
      reader.onerror = () => {
        console.error("[processImageFile] ファイル読み込みエラー", file.name);
        reject(new Error("ファイル読み込みエラー"));
      };
      reader.readAsDataURL(file);
    });
  };

  // ==========================
  //  IndexedDB から履歴を読み込み
  // ==========================
  const loadChatHistories = async () => {
    const request = indexedDB.open("ChatHistoryDB", 1);
    request.onsuccess = (event) => {
      const db = (event.target as IDBOpenDBRequest).result;
      const transaction = db.transaction(["chatHistory"], "readonly");
      const store = transaction.objectStore("chatHistory");

      store.getAll().onsuccess = (e) => {
        const histories = (e.target as IDBRequest).result as ChatHistory[];
        const sortedHistories = histories
          .sort(
            (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()
          )
          .slice(0, 30);
        setChatHistories(sortedHistories);
      };
    };

    request.onerror = (event) => {
      console.error("履歴読み込みエラー:", (event.target as IDBRequest).error);
    };
  };

  // ==========================
  //  IndexedDB に履歴を保存
  // ==========================
  const saveChatHistory = async (
    currentMessages: Message[],
    chatId: number | null
  ) => {
    if (currentMessages.length === 0) return;

    const newChatId = chatId ?? Date.now();
    if (!currentChatId) {
      setCurrentChatId(newChatId);
    }

    const historyItem: ChatHistory = {
      id: newChatId,
      title: currentMessages[0].content.slice(0, 10) + "...",
      messages: [...currentMessages],
      date: new Date().toISOString(),
      lastPromptDate: new Date().toISOString(),
    };

    const request = indexedDB.open("ChatHistoryDB", 1);
    request.onsuccess = (event) => {
      const db = (event.target as IDBOpenDBRequest).result;
      const transaction = db.transaction(["chatHistory"], "readwrite");
      const store = transaction.objectStore("chatHistory");

      store.getAll().onsuccess = (e) => {
        const histories = (e.target as IDBRequest).result as ChatHistory[];

        const existingIndex = histories.findIndex((h) => h.id === chatId);
        let updatedHistories = [...histories];

        if (existingIndex !== -1) {
          updatedHistories[existingIndex] = {
            ...histories[existingIndex],
            messages: historyItem.messages,
            lastPromptDate: historyItem.lastPromptDate,
          };
        } else {
          updatedHistories.push(historyItem);
        }

        updatedHistories = updatedHistories
          .sort(
            (a, b) =>
              new Date(b.lastPromptDate).getTime() -
              new Date(a.lastPromptDate).getTime()
          )
          .slice(0, 30);

        store.clear().onsuccess = () => {
          updatedHistories.forEach((history) => store.add(history));
          setChatHistories(updatedHistories);
        };
      };
    };
  };

  // ==========================
  //  履歴を復元
  // ==========================
  const restoreHistory = (history: ChatHistory) => {
    // 履歴から復元する際、もし編集中の場合は入力内容をクリアして編集中状態を解除
    if (isEditMode) {
      setInput("");
      setSelectedImagesBase64([]);
      setIsEditMode(false);
    }
    setCurrentChatId(history.id);
    setMessages(history.messages);
  };

  // ==========================
  //  チャットをクリア
  // ==========================
  const clearChat = () => {
    setMessages([]);
    setCurrentChatId(null);
    setSelectedImagesBase64([]);
    setInput("");
    setIsEditMode(false);
  };

  // ==========================
  //  画像アップロードハンドラー（枚数・長辺・容量制限付き）
  // ==========================
  const handleImageUpload = async (e: ChangeEvent<HTMLInputElement>) => {
    console.log("[handleImageUpload] ファイル選択イベント発生");
    if (!e.target.files) return;
    const files = Array.from(e.target.files);

    // 既に選択されている画像枚数と合わせ、最大枚数を超えないようにする
    const allowedCount = MAX_IMAGES - selectedImagesBase64.length;
    if (files.length > allowedCount) {
      setErrorMessage(
        `一度にアップロードできる画像は最大 ${MAX_IMAGES} 枚です`
      );
      files.splice(allowedCount);
    }

    const promises = files.map((file) => processImageFile(file));

    try {
      const newBase64s = await Promise.all(promises);
      console.log("[handleImageUpload] 画像処理完了:", newBase64s);
      setSelectedImagesBase64((prev) => [...prev, ...newBase64s]);
    } catch (error) {
      console.error("[handleImageUpload] 画像アップロードエラー:", error);
      setErrorMessage("画像の処理中にエラーが発生しました");
    }
  };

  // ==========================
  //  ユーザー側プロンプトの編集（以前のメッセージに戻って再送信）
  //  ※ 編集対象はユーザーメッセージのみ。編集対象以降の分岐は削除します。
  // ==========================
  const handleEditPrompt = (index: number) => {
    if (isProcessing) return; // 生成中は編集不可とする
    const messageToEdit = messages[index];
    if (messageToEdit.role !== "user") return; // ユーザーメッセージでなければ何もしない

    // 現在のメッセージをバックアップ（キャンセル時に元に戻すため）
    setBackupMessages(messages);

    // 入力エリアに既存のプロンプト内容をロード
    setInput(messageToEdit.content);
    // 画像があれば再利用（なければクリア）
    if (messageToEdit.images && messageToEdit.images.length > 0) {
      setSelectedImagesBase64([...messageToEdit.images]);
    } else {
      setSelectedImagesBase64([]);
    }
    // 編集対象以降のメッセージ（＝分岐）を削除
    setMessages(messages.slice(0, index));
    // 編集モードに入る
    setIsEditMode(true);
  };

  // ==========================
  //  編集モードのキャンセル（追加）
  // ==========================
  const cancelEditMode = () => {
    // バックアップから元のメッセージを復元
    if (backupMessages.length > 0) {
      setMessages(backupMessages);
      setBackupMessages([]);
    }
    setInput("");
    setSelectedImagesBase64([]);
    setIsEditMode(false);
  };

  // ==========================
  //  メッセージ送信
  // ==========================
  const sendMessage = async () => {
    let backupInput = "";
    let backupImages: string[] = [];
    let backupMsgs: Message[] = [];

    if (!input.trim() && selectedImagesBase64.length === 0) return;
    if (isProcessing || !token) return;

    setErrorMessage("");

    try {
      setIsProcessing(true);

      // 送信前の状態をバックアップ
      backupInput = input;
      backupImages = [...selectedImagesBase64];
      backupMsgs = [...messages];

      const newUserMessage: Message = {
        role: "user",
        content: input.trim() || "[Images Uploaded]",
        images:
          selectedImagesBase64.length > 0 ? [...selectedImagesBase64] : [],
      };

      let updatedMessages: Message[] = [...messages, newUserMessage];
      setMessages(updatedMessages);

      // 入力欄と画像選択状態をリセットし、編集モードも解除
      setInput("");
      setSelectedImagesBase64([]);
      setIsEditMode(false);

      abortControllerRef.current = new AbortController();
      const signal = abortControllerRef.current.signal;

      const chatRequest: ChatRequest = {
        messages: updatedMessages,
        model: selectedModel,
      };

      const response = await fetch(`${API_BASE_URL}/backend/chat`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "text/event-stream",
          Authorization: `Bearer ${token}`,
        },
        signal,
        body: JSON.stringify(chatRequest),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      let assistantMessage = "";
      const reader = response.body?.getReader();
      const decoder = new TextDecoder();

      if (reader) {
        updatedMessages = [
          ...updatedMessages,
          { role: "assistant", content: "" },
        ];
        setMessages(updatedMessages);

        while (true) {
          const { done, value } = await reader.read();
          if (done) break;

          const text = decoder.decode(value, { stream: true });
          assistantMessage += text;

          setMessages((msgs) => {
            const newMsgs = [...msgs];
            newMsgs[newMsgs.length - 1] = {
              role: "assistant",
              content: assistantMessage,
            };
            return newMsgs;
          });
        }
      }

      updatedMessages[updatedMessages.length - 1].content = assistantMessage;
      await saveChatHistory(updatedMessages, currentChatId);
    } catch (error: any) {
      if (error.name !== "AbortError") {
        console.error("メッセージ送信エラー:", error);
        setMessages(backupMsgs);
        setInput(backupInput);
        setSelectedImagesBase64(backupImages);
        setErrorMessage(
          error instanceof Error ? error.message : "不明なエラー"
        );
      }
    } finally {
      setIsProcessing(false);
      abortControllerRef.current = null;
    }
  };

  // ==========================
  //  キー押下時の送信トリガー
  // ==========================
  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  // ==========================
  //  送信停止（AbortController を利用）
  // ==========================
  const stopGeneration = () => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
      setIsProcessing(false);
    }
  };

  // ==========================
  //  履歴ダウンロード
  // ==========================
  const downloadHistory = () => {
    const historyData = JSON.stringify(chatHistories, null, 2);
    const blob = new Blob([historyData], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `chat-history-${new Date().toISOString()}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // ==========================
  //  履歴アップロード
  // ==========================
  const uploadHistory = async (event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = async (e) => {
      try {
        const content = e.target?.result as string;
        const uploadedHistories = JSON.parse(content) as ChatHistory[];

        const request = indexedDB.open("ChatHistoryDB", 1);
        request.onsuccess = (event) => {
          const db = (event.target as IDBOpenDBRequest).result;
          const transaction = db.transaction(["chatHistory"], "readwrite");
          const store = transaction.objectStore("chatHistory");

          store.clear().onsuccess = () => {
            uploadedHistories.forEach((history) => store.add(history));
            setChatHistories(uploadedHistories);
          };
        };
      } catch (error) {
        console.error("履歴アップロードエラー:", error);
      }
    };
    reader.readAsText(file);
  };

  // ==========================
  //  JSX の描画
  // ==========================
  return (
    <div className="flex flex-1 h-[calc(100vh-64px)] mt-2 overflow-hidden">      {/* エラーポップアップ */}
      {errorMessage && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-10">
          <div className="bg-white p-6 rounded shadow">
            <h2 className="text-xl font-semibold mb-4">エラー</h2>
            <p className="mb-4">{errorMessage}</p>
            <button
              onClick={() => setErrorMessage("")}
              className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            >
              閉じる
            </button>
          </div>
        </div>
      )}

      {/* サイドバー */}
      <div className="w-64 bg-gray-800 shadow-lg p-4 overflow-y-auto">
        <div className="mb-6">
          <h2 className="text-lg font-semibold mb-4 text-gray-100">
            モデル選択
          </h2>
          <select
            value={selectedModel}
            onChange={(e) => setSelectedModel(e.target.value)}
            className="w-full p-2 bg-gray-700 border-gray-600 text-gray-100 rounded-lg focus:ring-2 focus:ring-blue-500"
          >
            {models.map((m) => (
              <option key={m} value={m}>
                {m}
              </option>
            ))}
          </select>
        </div>
        <button
          onClick={clearChat}
          className="w-full mb-6 p-2 bg-gray-700 hover:bg-gray-600 text-gray-100 rounded-lg transition-colors"
        >
          新規チャット
        </button>
        <div className="flex space-x-2 mb-6">
          <button
            onClick={downloadHistory}
            className="flex-1 p-2 bg-green-500 hover:bg-green-600 text-white rounded-lg transition-colors"
          >
            履歴保存
          </button>
          <label className="flex-1">
            <input
              type="file"
              accept=".json"
              onChange={uploadHistory}
              className="hidden"
            />
            <span className="block p-2 bg-purple-500 hover:bg-purple-600 text-white rounded-lg transition-colors text-center cursor-pointer">
              履歴読込
            </span>
          </label>
        </div>
        <div>
          <h2 className="text-lg font-semibold mb-4 text-gray-100">
            最近のチャット
          </h2>
          <div className="space-y-2">
            {chatHistories.map((history) => (
              <div
                key={history.id}
                onClick={() => restoreHistory(history)}
                className="p-2 hover:bg-gray-700 text-gray-100 rounded cursor-pointer transition-colors"
              >
                <div className="font-medium">{history.title}</div>
                <div className="text-sm text-gray-400">
                  {new Date(history.lastPromptDate).toLocaleString()}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* メインチャットエリア */}
      <div className="flex-1 flex flex-col h-full">
        {/* メッセージ表示エリア */}
        <div
          ref={messageContainerRef}
          className="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-900"
        >
          {messages.map((message, index) => (
            <div
              key={index}
              className={`max-w-[80%] ${
                message.role === "user" ? "ml-auto" : "mr-auto"
              }`}
            >
              <div
                className={`p-4 rounded-lg ${
                  message.role === "user"
                    ? "bg-blue-900 text-gray-100"
                    : "bg-gray-800 border border-gray-700 text-gray-100"
                }`}
              >
                {/* ユーザー側メッセージの場合、編集ボタンを表示 */}
                {message.role === "user" ? (
                  <div className="flex justify-between items-center">
                    <div>{message.content}</div>
                    <button
                      onClick={() => handleEditPrompt(index)}
                      className="ml-2 text-sm text-gray-300 hover:text-gray-100"
                      title="このプロンプトを編集して再送信"
                    >
                      編集
                    </button>
                  </div>
                ) : (
                  <div>{message.content}</div>
                )}
                {message.images && message.images.length > 0 && (
                  <div className="mt-2 flex flex-wrap gap-2">
                    {message.images.map((img, i) => (
                      <img
                        key={i}
                        src={img}
                        alt="Uploaded"
                        onClick={() => setEnlargedImage(img)}
                        className="max-w-xs rounded border cursor-pointer"
                      />
                    ))}
                  </div>
                )}
              </div>
              <div
                className={`text-xs text-gray-400 mt-1 ${
                  message.role === "user" ? "text-right" : "text-left"
                }`}
              >
                {message.role === "user" ? "あなた" : "アシスタント"}
              </div>
            </div>
          ))}
        </div>

        {/* 入力エリア */}
        <div className="border-t border-gray-700 p-4 bg-gray-800">
          {/* 編集中の場合、バナー表示（キャンセルボタン付き） */}
          {isEditMode && (
            <div className="mb-2 p-2 bg-yellow-200 text-yellow-800 rounded flex justify-between items-center">
              <span>※ 現在、プロンプトのやり直しモードです</span>
              <button
                onClick={cancelEditMode}
                className="text-sm text-red-600 hover:underline"
              >
                キャンセル
              </button>
            </div>
          )}
          {/* 選択された画像プレビュー */}
          {selectedImagesBase64.length > 0 && (
            <div className="flex flex-wrap mb-4 gap-2">
              {selectedImagesBase64.map((imgBase64, i) => (
                <div key={i} className="relative inline-block">
                  <img
                    src={imgBase64}
                    alt="preview"
                    onClick={() => setEnlargedImage(imgBase64)}
                    className="w-16 h-16 object-cover rounded border cursor-pointer"
                  />
                  <button
                    className="absolute top-0 right-0 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center"
                    onClick={() =>
                      setSelectedImagesBase64((prev) =>
                        prev.filter((_, index) => index !== i)
                      )
                    }
                  >
                    ×
                  </button>
                </div>
              ))}
            </div>
          )}
          <div className="flex space-x-2">
            <textarea
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={handleKeyPress}
              className="flex-1 p-2 bg-gray-900 border border-gray-700 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-100"
              placeholder="メッセージを入力..."
              rows={2}
              disabled={isProcessing}
            />
            <label className="flex items-center justify-center px-4 py-2 bg-gray-700 hover:bg-gray-600 text-gray-100 rounded-lg cursor-pointer">
              画像選択
              <input
                type="file"
                accept="image/*"
                multiple
                className="hidden"
                onChange={handleImageUpload}
                disabled={isProcessing}
              />
            </label>
            <button
              onClick={isProcessing ? stopGeneration : sendMessage}
              className={`px-4 py-2 rounded-lg ${
                isProcessing
                  ? "bg-red-900 hover:bg-red-800"
                  : "bg-blue-900 hover:bg-blue-800"
              } text-gray-100 transition-colors`}
            >
              {isProcessing ? "停止" : "送信"}
            </button>
          </div>
        </div>
      </div>

      {/* --- 追加: 拡大表示用モーダル --- */}
      {enlargedImage && (
        <div
          className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-75 z-50"
          onClick={() => setEnlargedImage(null)}
        >
          <div className="relative">
            <button
              className="absolute top-0 right-0 m-2 text-white text-2xl font-bold"
              onClick={() => setEnlargedImage(null)}
            >
              ×
            </button>
            <img
              src={enlargedImage}
              alt="Enlarged"
              className="max-h-screen max-w-full"
              onClick={(e) => e.stopPropagation()}
            />
          </div>
        </div>
      )}
    </div>
  );
};

export default ChatContainer;

#指示#
geocodingで送るクエリーについて重複してapiをたたくものを省略する機能をつけたい。その完全省略なしapp.pyとgecodingpage.tsxのコードを出力せよ。
①省略するのは、１回の送信で複数行に同じクエリーあったときに、実際にapiをたたくのは１回だけとして、同じクエリーには１回の結果を全て貼り付ける。
②実行したクエリーとその取得時間と結果をindexedDBに保存する（indexedＤＢの機能については、いずれchagpage.tsxのものを参考にすること）
③新たに実行するクエリーに②の保存したクエリーがあり、かつ取得期間がos.getenv('GOOGLE_MAPS_API_CACHE_TTL')以内であれば、②の結果を③の結果とする。違ったら新たにapiをたたき、その結果で②の結果を上書きする。つまり、indexedDBはキーがクエリーである辞書形式が良い気がする。